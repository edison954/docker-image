
CONTENEDOR DE MYSQL
docker run -d -p 3333:3306 --name my-db2 -e "MYSQL_ROOT_PASSWORD=12345678" -e "MYSQL_DATABASE=docker-db" -e "MYSQL_USER=docker-user" -e "MYSQL_PASSWORD=87654321"  mysql

ELIMINAR TODOS LOS CONTENEDORES

docker rm -fv $(docker ps -aq)
docker ps -q | xargs docker rm -f


MONGO
docker pull mongo
docker run -d --name my-mongo -p 27017:27017 mongo

VER CONSUMO DE RECURSOS
docker stats my-mongo

VER LOGS
docker logs -f my-mongo


IMAGENES DE NGINX, APACHE, TOMCAT, POSTGRES

docker run -d -p 8888:80 --name nginx nginx
docker run -d -p 9999:80 --name apache httpd
docker pull tomcat:9.0.8-jre8-alpine
docker run -d -p 7070:8080 --name my-tomcat tomcat:9.0.8-jre8-alpine

docker pull postgres
docker run -d --name postgres -e "POSTGRES_PASSWORD=12345678" -e "POSTGRES_USER=docker-user" -e "POSTGRES_DB=docker-db" -p 5432:5432 postgres

INGRESAR A LA BD DE POSTGRESS
docker exec -ti postgres bash
psql -d docker-db -U docker-user
SALIR
\q

\l    --> lista las bds creadas

JENKINS
docker pull jenkins
docker run -d -p 7070:8080 --name jenkins jenkins

docker ps -l    --> ultimo contenedor creado

INGRESAR A LA CONSOLA
docker exec -ti jenkins bash
cat /var/jenkins_home/secrets/initialAdminPassword


NGROK https://dashboard.ngrok.com/get-started/setup
./ngrok http 80

msThirdParty
docker build --tag krakend-edison -f .docker/Dockerfile .
docker run -d -p 8080:8080 --name krakend krakend-edison


KAFKA https://kafka.apache.org/quickstart
producer
bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic test
 
consumer
bin/kafka-console-consumer.sh --bootstrap-server qakafka.siigo.com:9094 --topic test --from-beginning



https://qak8s.siigo.com/api/StaticParameters/columnsThirdParty
https://kafka.apache.org/quickstart


ADMINISTRACION DE USUARIOS
docker build -t centos:prueba .
docker run -d -ti --name prueba centos:prueba
docker exec -ti prueba bash
whoami
docker exec -u edison  -ti prueba2 bash  --> para ingresar con un usuario especifico al container
docker exec -u root  -ti prueba1 bash
docker rm -fv $(docker ps -aq)    --> eliminar todos los contenedores

LIMITAR RECURSOS A UN CONTENEDOR

docker run -d --name mongo -p 27018:27017 mongo
docker run --help | grep memo
docker run -d -m "500mb" --name mongo2 -p 27019:27017 mongo
docker stats mongo2

grep "model name" /proc/cpuinfo   --> ver procesadores el equipo
grep "model name" /proc/cpuinfo | wc -l

docker run --help | grep cpu
docker run -d -m "500mb" --cpuset-cpus 0-1  --name mongo4 -p 27021:27017 mongo    --> usa la cpu 0 y la cpu 1

COPIAR ARCHIVOS A UN CONTENEDOR
docker run -d --name apache httpd
docker cp index.html apache:/tmp   --> copiar archivos desde fuera del contenedor hacia el contenedor o visebersa
docker exec -ti apache bash
cd /tmp/
ls -l
pwd  --> ver path donde estamos
docker cp index.html apache:/usr/local/apache2/htdocs/index.html

docker exec -ti apache bash   
cd /var/log/                        --> a la inversa
cat dpkg.log 
docker cp apache:/var/log/dpkg.log .

CONVERTIR UN CONTENEDOR EN UNA IMAGEN
docker build -t centos-test .
docker run -dti --name centos centos-test
docker exec -ti centos bash                     -->Ingresar al contenedor
touch file1.txt                 --> crear archivo
docker commit centos centos-resultante
docker images
docker rm -fv centos
docker run -dti --name centos centos-resultante
docker run -dti --name centos centos-resultante bash

todo lo que este en un VOLUME no se va a persistir cuando se haga un: docker commit  todo lo demas siigo

SOBREESCRIBIR EL CMD DE UNA IMAGEN SIN UN Dockerfile
docker run -dti centos
docker run -dti centos echo hola mundo   --> el ultimo arg debe ser el nombre de la imagen, todo lo demas lo toma como cmd
docker logs nifty_cohen
docker run -d -p 8080:8080 centos python -m SimpleHTTPserver 8080

AUTODESTRUIR CONTENEDORES
docker run -dti --name centos centos
docker exec -ti centos bash
cat /etc/profile
docker rm -fv centos

docker run --rm -ti --name centos centos bash   --> al salise del bash del contendor este automaticament se destruye

CAMBIAR EL DOCUMENTROOT DE docker
docker info | grep -i root
sudo sudo
cd /var/lib/docker
vi /lib/systemd/system/docker.service           --> editar archivo de configuracion de docker
systemctl daemon-reload
systemctl restart docker

sudo systemctl stop docker          --> detener servicio de docker

rm -rf /opt/*                               -->eliminar archivos



VOLUMENES
permiten almacenar data persistente del contenedor
-host  -> usan una carpeta en el contenedor
-anonymous   -> no definimos una carpeta pero docker automaticamente la genera randomicamente
-named volumes   -> los creamos no son carpetas nuestras, son adminsitradas por docker si tienen un nombre

VOLUMENES DE HOST
docker run -d -p 3306:3306 --name my-db -e "MYSQL_ROOT_PASSWORD=12345678" -e "MYSQL_DATABASE=docker-db" -e "MYSQL_USER=docker-user" -e "MYSQL_PASSWORD=87654321"  mysql 
docker logs -f my-db
mysql -u root -p
12345678
mysql -u root -h 127.0.0.1 -p
mysqldump -u root -h 127.0.0.1 -p12345678 sys > dump.sql            -generar bkup
mysql -u root -h 127.0.0.1 -p docker-db < dump.sql                  -importar desde el bkup anterior
mysql -u root -h 127.0.0.1 -p docker-db
show tables


Volumenes para indicarle a docker que cuando borre el contenedor me mantenga la informacion que tengo en ellos

VOLUMEN DE HOST
docker run -d -p 3306:3306 --name my-db -e "MYSQL_ROOT_PASSWORD=12345678" -e "MYSQL_DATABASE=docker-db" -e "MYSQL_USER=docker-user" -e "MYSQL_PASSWORD=87654321" -v /opt/mysql/:/var/lib/mysql  mysql 

VOLUMEN ANONIMO
docker run -d -p 3306:3306 --name my-db -e "MYSQL_ROOT_PASSWORD=12345678" -e "MYSQL_DATABASE=docker-db" -e "MYSQL_USER=docker-user" -e "MYSQL_PASSWORD=87654321" -v /var/lib/mysql  mysql 
docker info | grep -i root

VOLUMEN NOMBRADO
dentro de un DockerFile

docker volume ls
docker build -t test-vol -f Dockerfile2 .
docker run -dti --name test test-vol
docker volume ls
docker exec -ti test bash
cd /opt/
touch file1.txt
exit
docker ps
docker info | grep -i root
cd /var/lib/docker
sudo su
cd /var/lib/docker

docker info | grep -i root              -> ver ruta de docker y volumenes

docker volume rm 17046e9eebc1f00c23b86a5d49f1eb9587c12fdf2cdfe59176edbd8f3bd60a99   -> eliminar Volumenes


VOLUEMEN NOMBRADO
docker volume create mysql-data         -> crear volumen
docker volume ls                        -> listar volumen
docker volume rm mysql-data             -> eliminar volumen

usar volumen

docker volume create my-volume
docker volume ls
docker run -d -p 3306:3306 --name my-db -e "MYSQL_ROOT_PASSWORD=12345678" -e "MYSQL_DATABASE=docker-db" -e "MYSQL_USER=docker-user" -e "MYSQL_PASSWORD=87654321" -v my-volume:/var/lib/mysql  mysql 

DANGLING VOLUMES
docker volume ls -f dangling=true
docker volume ls -f dangling=true -q        -> recuperar los initialAdminPassword
docker volume ls -f dangling=true -q | xargs docker volume rm           -> eliminarlos todos


docker volume rm my-volume

IMAGEN DE MONGO CON VOLUMEN EN DISCO DEL PC

docker run -d -p 27018:27017 -v /d/docker/volumes/mongo/:/data/db mongo
docker exec -ti gifted_bartik bash

use mydb
WriteResult({ "nInserted" : 1 })
show dbs

docker run -d -p 27018:27017 --name mongo -v /d/docker/volumes/mongo/:/data/db mongo
docker exec -ti mongo bash

docker run -d -p 27018:27017 --name mongo -v "D:\docker\volumes\mongo":/data/db mongo

docker run -d -p 7070:8080 --name jenkins -v /d/docker/volumes/jenkis/:/var/jenkins_home jenkins 


INGRESAR AL CONTENEDOR SIN ACCEDER A LA CONSOLA DE JENKINS
docker exec jenkins bash -c "cat /var/jenkins_home/secrets/initialAdminPassword"

COMPARTIR VOLUMENES EN VARIOS CONTENEDORES


REDES
RED POR DEFECTO
ip a | grep docker
redo por defecto docker0

docker run -d nginx
docker ps
docker inspect busy_boyd

MIRAR LA RED POR DEFECTO
docker network ls
docker network ls | grep bridge
docker network inspect bridge

docker inspect busy_boyd | grep bridge -C 5

si creamos contenedores pero no definimos la red, se van a ir adjuntando a la red bridge

ping desde contenedor 1 a contenedor 2
docker exec quirky_jones bash -c "ping 172.17.0.2"

CREAR UNA RED
docker network
docker network create test-network
docker network ls
docker network ls | grep test
docker network create --help

docker network create -d bridge --subnet 172.124.10.0/24 --gateway 172.124.10.1 docker-test-network
docker network ls | grep docker-test
docker network inspect docker-test-network

docker network inspect docker-test-network|less

docker run --network docker-test-network -d --name test2 -ti centos
docker inspect test2

por ejemplo contenedor1 webserver, contenedor2 bds
docker run --network docker-test-network -d --name cont1 -ti centos        
docker run --network docker-test-network -d --name cont2 -ti centos
docker exec cont1 bash -c "ping 172.124.10.4"
docker exec cont2 bash -c "ping 172.124.10.3"

en redes definidas por el usuario si se pueden ver los contenedores por nombre
docker exec cont2 bash -c "ping cont1"
docker exec cont1 bash -c "ping cont2"

docker run --network test-network -d --name cont3 -ti centos
docker exec cont2 bash -c "ping cont3"   --> no hace ping porque estan en redes diferentes

CONECTAR CONTENEDORES EN DISTINTAS REDES
docker network connect docker-test-network cont3        --> le adjunta la red docker-test-network al cont3 que solo tenia la red test-network
docker inspect cont3
docker exec cont1 bash -c "ping cont3"      --> si funciona

DESCONECTAR CONTENEDOR DE UNA RED ASOCIADA
docker network disconnect docker-test-network cont3
docker exec cont3 bash -c "ping cont1"      -> ya no funciona

ELIMINAR REDES
docker rm -fv cont1
docker rm -fv cont2
docker network rm docker-test-network 
docker network ls | grep docker-test

ASIGNAR UNA IP A UN CONTENEDOR
docker network create --subnet 172.128.10.0/24 --gateway 172.128.10.1 -d bridge my-net
docker network inspect my-net
docker run --network my-net -d --name nginx1 -ti centos
docker inspect nginx1       --> se crea con una ip al azar dentro de la red
docker run --network my-net --ip 172.128.10.50  -d --name nginx2 -ti centos  --> le define una ip
docker inspect nginx2

USAR LA RED DEL HOST  (PC)
docker run --network host -d --name test2 -ti centos
docker exec -ti test2 bash
hostname
exit

docker exec -ti test2 bash
yum -y install net-tools
ifconfig

RED NONE            --> para que los contenedores no tengan red
docker network ls | grep none
docker run --network none --name hola -d -ti centos
docker inspect hola


docker run -d -p 8080:80 nginx
docker run -d -p 127.0.0.1:8081:80 nginx   --> restringir la ip por la cual se puede acceder

DOCKER COMPOSE
docker compose install              -> en google
docker-compose              -> ya viene instalado en doker desktop

mkdir docker-compose
cd docker-compose/

archivos con extencion .yml
code docker-compose.yml

cuatro partes del archivo .yml
version:
services:
volumes:
networks:

versions y service son obligatorios
volumes y networks opcionales

docker run -d --name nginx -p 80:80 nginx

esto es lo mismo que en yml:

version: "3"
services:
  web:
    container_name: nginx1
    ports:
      - "8080:80"
    image: nginx

------ subir contenedor a partir del yml
docker-compose up -d
------ eliminar lo creado en yml
docker-compose down


VARIABLES DE ENTORNO

version: "3"
services:
  bd:
    image: mysql:5.7
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      - "MYSQL_ROOT_PASSWORD=12345678"

------------
docker-compose up -d
docker exec -ti mysql bash
env
mysql -u root -p12345678
docker-compose down

ENVIAR VARIABLE DE ENTORNO A UN ARCHIVO
echo "MYSQL_ROOT_PASSWORD=12345678" > common.env
cat common.env

version: "3"
services:
  bd:
    image: mysql:5.7
    container_name: mysql
    ports:
      - "3306:3306"
    env_file: common.env                --> archivo con las variables

docker exec -ti mysql bash
env


VOLUMENES EN DOCKER COMPOSE
(nombrados, anonymous y de host)
solo se veran nombrados y de host


version: "3"
services:
  web:
    container_name: nginx1
    ports:
      - "8080:80"
    volumes:
      - "vol2:/usr/share/nginx/html"
    image: nginx
volumes:
  vol2:

--------------
docker info | grep -i root          --> ver la ruta de docker en el equipo

/var/lib/docker  en windows es:
C:\Users\Public\Documents\Hyper-V\Virtual hard disks

 docker-compose down

--CON VOLUMEN DE HOST

version: "3"
services:
  web:
    container_name: nginx2
    ports:
      - "8081:80"
    volumes:
      - "d:\\docker:/usr/share/nginx/html"
    image: nginx
volumes:
  vol2:

--DOCKER NETWORK EN DOCKER COMPOSE
version: "3"
services:
  web:
    container_name: nginx2
    ports:
      - "8081:80"
    volumes:
      - "d:\\docker:/usr/share/nginx/html"
    image: nginx
    networks:
      - net-test
networks:
  net-test:


docker-compose -f docker-compose.yml up -d
docker inspect nginx2


--CON DOS CONTENEDORES
version: "3"
services:
  web:
    container_name: nginx2
    ports:
      - "8081:80"
    image: httpd
    networks:
      - net-test
  web2:
    container_name: nginx3
    ports:
      - "8082:80"
    image: httpd
    networks:
      - net-test
networks:
  net-test:

docker-compose -f docker-compose.yml up -d
docker exec -ti nginx3 bash -c "ping nginx2"
docker exec -ti nginx3 bash -c "ping web"


CONSTRUIR IMAGENES EN DOCKER COMPOSE
mkdir build
Crear docker-compose.yml
Crear Dockerfile

version: "3"
services:
  web:
    container_name: web
    image: web-test
    build: .


docker-compose build
docker images

CUANDO EL DOCKERFILE SE LLAMA diferentes
version: "3"
services:
  web:
    container_name: web
    image: web-test
    build:
      context: .                                -> carpeta
      dockerfile: Dockerfile1                   -> nombre archivo


mv Dockerfile Dockerfile1

SOBREESCRIBIR EL CMD DE UN CONTENEDOR

version: "2"
services:
  web:
    image: centos
    command: python -m SimpleHTTPServer 8080
    ports:
      - "8080:8080"

ocker-compose -f docker-compose-cmd.yml up -d


LIMITAR RECURSOS EN DOCKER COMPOSE
version: "3"
services:
  web:
    container_name: nginx
    mem_limit: 30m
    cpuset: "0"
    image: nginx:alpine

docker-compose -f docker-compose-memory.yml up -d
docker stats nginx                                      -> ver recursos memoria y cpu

POLITICA DE REINICIO DE LOS CONTENEDORES
en google  docker restar policy
restart: no 
restart: always 
restart: on-failure
restart: unless.stopped 


docker run -dti centos
docker stop pensive_chaum


version: "3"
services:
  test:
    container_name: test
    image: restart-image
    build: .
    restart: always


En dockerfile:

FROM centos

COPY star.sh /star.sh

RUN chmod +x /star.sh 

CMD /star.sh


en star.sh:

#!bin/bash

echo "Estoy vivo"
sleep 5

echo "Estoy detenido"

---

docker-compose build
docker-compose up -d
docker ps
docker logs -f test

watch -d docker ps



restart: unless-stopped             en .yml  reinicia solo si no se detiene a mano
docker-compose up -d
docker ps
docker stop test


restart: on-failure                 en .yml  solo reinicia si se detuvo por un fallo
docker-compose up -d

en star.sh 
exit 1

docker-compose build
docker-compose up -d
docker ps

watch -d docker ps

PERSONALIZAR EL NOMBRE DE TU PROYECTO EN COMPOSE
cat docker-compose-cmd.yml
docker-compose -f docker-compose-cmd.yml up -d


PREFIJO EN EN LOS NOMBRES DE LOS RECURSOS CREADOS (RED,VOLUMENES)  -p proyecto
docker-compose -p webtest  -f docker-compose-vol.yml up -d
docker-compose -p webtest  -f docker-compose-vol.yml down


